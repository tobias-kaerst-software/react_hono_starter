name: CI Pipeline

on:
  workflow_dispatch:
  push:

permissions:
  contents: write
  pull-requests: write

jobs:
  changes:
    name: Determine
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            backend:
              - '.github/workflows/ci.yml'
              - 'backend/**'
            frontend:
              - '.github/workflows/ci.yml'
              - 'frontend/**'

  frontend:
    name: Lint and build frontend
    runs-on: ubuntu-latest

    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}

    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install
        working-directory: frontend

      - name: Run linter
        run: bun frontend lint
        working-directory: frontend

      - name: Build project
        run: bun frontend build
        working-directory: frontend

  translations:
    name: Fetch latest translations
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: Infisical/secrets-action@v1.0.7
        with:
          client-id: ${{ vars.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          project-slug: '${{ vars.INFISICAL_PROJECT_SLUG }}'
          env-slug: '${{ vars.INFISICAL_ENV_SLUG }}'
          secret-path: '/frontend'

      - name: Fetch Translations
        uses: crowdin/github-action@v2
        with:
          config: frontend/crowdin.yml
          base_path: frontend

          download_translations: true
          create_pull_request: true

          pull_request_title: Update Translations
          pull_request_labels: localization
          localization_branch_name: l10n_crowdin_translations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ env.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ env.CROWDIN_PERSONAL_TOKEN }}

  backend:
    name: Lint and build backend
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    env:
      DENO_DIR: ~/.deno/install/cache
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('backend/deno.lock') }}

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Check Formatting
        run: deno fmt --check
        working-directory: backend

      - name: Run Linter
        run: deno lint
        working-directory: backend

      - name: Build project
        run: deno task build
        working-directory: backend
