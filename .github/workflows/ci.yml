name: CI Pipeline

on:
  workflow_dispatch:
  push:

jobs:
  changes:
    name: Determine
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - '.github/workflows/ci.yml'
              - 'backend/**'
            frontend:
              - '.github/workflows/ci.yml'
              - 'frontend/**'

  frontend:
    name: Lint and build frontend
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install
        working-directory: frontend

      - name: Run linter
        run: bun frontend lint
        working-directory: frontend

      - name: Build project
        run: bun frontend build
        working-directory: frontend

  backend:
    name: Lint and build backend
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    env:
      DENO_DIR: ~/.deno/install/cache
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('backend/deno.lock') }}

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Check Formatting
        run: deno fmt --check
        working-directory: backend

      - name: Run Linter
        run: deno lint
        working-directory: backend

      - name: Build project
        run: deno task build
        working-directory: backend
